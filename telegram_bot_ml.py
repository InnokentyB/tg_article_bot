#!/usr/bin/env python3
"""
Telegram Bot —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤–Ω–µ—à–Ω–µ–≥–æ ML —Å–µ—Ä–≤–∏—Å–∞
"""
import asyncio
import logging
import os
import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage

# Load environment variables
from dotenv import load_dotenv
load_dotenv()

from database import DatabaseManager
from text_extractor import TextExtractor

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ArticleBotML:
    def __init__(self):
        self.token = os.getenv('ARTICLE_BOT_TOKEN')
        if not self.token:
            raise ValueError("ARTICLE_BOT_TOKEN environment variable is required")
        
        self.bot = Bot(token=self.token)
        storage = MemoryStorage()
        self.dp = Dispatcher(storage=storage)
        self.db = DatabaseManager()
        self.text_extractor = TextExtractor()
        
        # ML Service client
        self.ml_service_url = os.getenv('ML_SERVICE_URL', 'http://ml-service:8000')
        self.ml_client = httpx.AsyncClient(base_url=self.ml_service_url, timeout=30.0)
        
        # Register handlers
        self.setup_handlers()
    
    def setup_handlers(self):
        """Setup message handlers"""
        self.dp.message(Command('start'))(self.cmd_start)
        self.dp.message(Command('help'))(self.cmd_help)
        self.dp.message(Command('stats'))(self.cmd_stats)
        self.dp.message()(self.process_message)
    
    async def initialize(self):
        """Initialize all components"""
        await self.db.initialize()
        await self.text_extractor.initialize()
        
        # Force delete webhook to ensure polling works
        try:
            await self.bot.delete_webhook(drop_pending_updates=True)
            logger.info("Webhook deleted successfully")
        except Exception as e:
            logger.warning(f"Failed to delete webhook: {e}")
        logger.info("Bot initialized successfully with ML integration")
    
    async def shutdown(self):
        """Shutdown all components"""
        await self.db.close()
        await self.text_extractor.close()
        await self.ml_client.aclose()
        await self.bot.session.close()
        logger.info("Bot shutdown completed")
    
    async def cmd_start(self, message: Message):
        """Handle /start command"""
        user = message.from_user
        if user:
            await self.db.save_user(
                telegram_user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
        
        welcome_text = """
ü§ñ Article Management Bot —Å ML

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:
‚Ä¢ –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ (–º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)
‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
‚Ä¢ –ò–∑–≤–ª–µ—á–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Å—Å—ã–ª–æ–∫
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑—É–µ—Ç —á–µ—Ä–µ–∑ ML
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

–ö–æ–º–∞–Ω–¥—ã:
/help - –°–ø—Ä–∞–≤–∫–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        await message.answer(welcome_text.strip())
    
    async def cmd_help(self, message: Message):
        """Handle /help command"""
        help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ (–º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)
2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é
3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
   - –ò–∑–≤–ª–µ—á–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Å—Å—ã–ª–∫–∏
   - –ö–∞—Ç–µ–≥–æ—Ä–∏–∑—É–µ—Ç —á–µ—Ä–µ–∑ ML —Å–µ—Ä–≤–∏—Å
   - –°–æ—Ö—Ä–∞–Ω–∏—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   - –ü–æ–∫–∞–∂–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç

–§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ ML –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è (OpenAI)
‚Ä¢ –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        await message.answer(help_text.strip())
    
    async def cmd_stats(self, message: Message):
        """Handle /stats command"""
        try:
            async with self.db.pool.acquire() as conn:
                articles_count = await conn.fetchval("SELECT COUNT(*) FROM articles")
                users_count = await conn.fetchval("SELECT COUNT(*) FROM users")
            
            stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üì∞ –°—Ç–∞—Ç–µ–π: {articles_count}
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}
ü§ñ ML —Å–µ—Ä–≤–∏—Å: –∞–∫—Ç–∏–≤–µ–Ω
        """
            await message.answer(stats_text.strip())
        except Exception as e:
            logger.error(f"Error getting stats: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def process_message(self, message: Message):
        """Process incoming messages"""
        user = message.from_user
        if not user:
            return
        
        # Save user info
        await self.db.save_user(
            telegram_user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        text = message.text
        if not text:
            await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –∏–ª–∏ —Å—Å—ã–ª–∫—É")
            return
        
        # Check if it's a URL
        original_url = None
        source_categories = []
        if text.startswith(('http://', 'https://')):
            original_url = text
            await message.answer("üîç –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ —Å—Å—ã–ª–∫–∏...")
            try:
                extracted_data = await self.text_extractor.extract_from_url(text)
                if not extracted_data or not extracted_data.get('text') or len(extracted_data['text']) < 50:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
                    return
                text = extracted_data['text']
                title = extracted_data.get('title') or "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
                source_categories = extracted_data.get('keywords', [])
            except Exception as e:
                logger.error(f"Error extracting text: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å—Å—ã–ª–∫–∏")
                return
        
        # Check text length
        if len(text) < 50:
            await message.answer("‚ùå –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤")
            return
        
        await message.answer("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç–∞—Ç—å—é —á–µ—Ä–µ–∑ ML —Å–µ—Ä–≤–∏—Å...")
        
        try:
            # Get ML categorization
            ml_response = await self.ml_client.post("/categorize-detailed", json={
                "text": text[:1000],  # Limit for ML processing
                "title": None
            })
            
            if ml_response.status_code == 200:
                ml_result = ml_response.json()
                final_cat = ml_result.get('final_categorization', {})
                categories = final_cat.get('categories', ['General'])
                confidence = final_cat.get('confidence', 0.5)
                summary = final_cat.get('summary')
                ml_details = ml_result
            else:
                logger.warning(f"ML service error: {ml_response.text}")
                categories = ['General']
                confidence = 0.5
                summary = None
                ml_details = None
            
            # Save to database
            article_id, fingerprint = await self.db.save_article(
                title=title or "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞",  # Provide default title
                text=text,
                original_link=original_url,
                categories_user=categories,
                telegram_user_id=user.id
            )
            
            # Update automatic categories if we have them
            if article_id and source_categories:
                await self.db.update_article_categories(article_id, source_categories)
            
            if article_id:
                # Format response
                response_text = f"""
‚úÖ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!

üìù ID: {article_id}
üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title or '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'}
üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(categories)}
üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%}
üåê –Ø–∑—ã–∫: {final_cat.get('language', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}
üîç –û—Ç–ø–µ—á–∞—Ç–æ–∫: {fingerprint[:8]}...
üìä –°–ª–æ–≤: {len(text.split())}
ü§ñ –ú–µ—Ç–æ–¥—ã: {', '.join(ml_details.get('processing_methods', ['basic'])) if ml_details else 'basic'}
                """
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                if source_categories:
                    response_text += f"\nüè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {', '.join(source_categories[:10])}"
                
                if summary:
                    response_text += f"\nüìÑ –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{summary}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –º–µ—Ç–æ–¥–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
                if ml_details:
                    basic_cat = ml_details.get('basic_categorization', {})
                    hf_cat = ml_details.get('huggingface_categorization')
                    openai_cat = ml_details.get('openai_categorization')
                    
                    response_text += f"\n\nüîç –î–µ—Ç–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏:"
                    response_text += f"\nüìù –ë–∞–∑–æ–≤—ã–π: {', '.join(basic_cat.get('categories', []))}"
                    
                    if hf_cat:
                        response_text += f"\nü§ó Hugging Face: {', '.join(hf_cat.get('categories', []))}"
                    
                    if openai_cat:
                        response_text += f"\nüß† OpenAI: {', '.join(openai_cat.get('categories', []))}"
                
                await message.answer(response_text.strip())
            else:
                await message.answer("‚ö†Ô∏è –°—Ç–∞—Ç—å—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                
        except Exception as e:
            logger.error(f"Error processing article: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—å–∏")

async def main():
    """Main function"""
    logger.info("Starting Telegram bot with ML integration...")
    
    bot = ArticleBotML()
    await bot.initialize()
    
    try:
        logger.info("Starting bot polling...")
        await bot.dp.start_polling(bot.bot)
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    finally:
        await bot.shutdown()

if __name__ == "__main__":
    asyncio.run(main())
