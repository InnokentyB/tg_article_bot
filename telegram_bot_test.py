"""
Telegram bot for article management - TEST VERSION
"""
import asyncio
import logging
import os
from typing import Optional
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, MessageReactionUpdated, MessageReactionCountUpdated
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# Load environment variables from .env file
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

from database import DatabaseManager
from text_extractor import TextExtractor
from article_categorizer import ArticleCategorizer
from advanced_categorizer import AdvancedCategorizer
from telegram_reactions import TelegramReactionsTracker
from external_source_tracker import ExternalSourceTracker

logger = logging.getLogger(__name__)

class ArticleStates(StatesGroup):
    waiting_for_categories = State()

class ArticleBotTest:
    def __init__(self):
        # Use test token from environment or fallback to the provided test token
        self.token = os.getenv('ARTICLE_BOT_TEST_TOKEN', '8270061551:AAFC5sxwxTM4zz8mzy7quKbSvG85lkGbyDs')
        if not self.token:
            raise ValueError("ARTICLE_BOT_TEST_TOKEN environment variable is required")
        
        self.bot = Bot(token=self.token)
        # Use memory storage for FSM
        storage = MemoryStorage()
        self.dp = Dispatcher(storage=storage)
        self.db = DatabaseManager()
        self.text_extractor = TextExtractor()
        self.categorizer = ArticleCategorizer()
        self.advanced_categorizer = AdvancedCategorizer()
        self.reactions_tracker = TelegramReactionsTracker(self.db)
        self.external_tracker = ExternalSourceTracker(self.db)
        
        # Register handlers
        self.setup_handlers()
    
    def setup_handlers(self):
        """Setup message handlers - order matters!"""
        # Commands first
        self.dp.message(Command('start'))(self.cmd_start)
        self.dp.message(Command('help'))(self.cmd_help)
        self.dp.message(Command('stats'))(self.cmd_stats)
        self.dp.message(Command('cancel'))(self.cmd_cancel)
        
        # FSM states have priority over general message handler
        self.dp.message(ArticleStates.waiting_for_categories)(self.process_categories)
        
        # General message handler last
        self.dp.message()(self.process_message)
        
        # Callback handlers
        self.dp.callback_query(lambda c: c.data and c.data.startswith('add_categories:'))(self.callback_add_categories)
        self.dp.callback_query(lambda c: c.data and c.data.startswith('done:'))(self.callback_done)
        self.dp.callback_query(lambda c: c.data and c.data.startswith('stats:'))(self.callback_show_stats)
        self.dp.callback_query(lambda c: c.data and c.data.startswith('track_external:'))(self.callback_track_external)
        
        # Reaction handlers (requires bot to be admin in chat)
        self.dp.message_reaction()(self.handle_message_reaction)
        self.dp.message_reaction_count()(self.handle_message_reaction_count)
    
    async def initialize(self):
        """Initialize all components and force delete webhook"""
        await self.db.initialize()
        await self.text_extractor.initialize()
        await self.external_tracker.initialize()
        # Force delete webhook to ensure polling works
        try:
            await self.bot.delete_webhook(drop_pending_updates=True)
            logger.info("Webhook deleted successfully")
        except Exception as e:
            logger.warning(f"Failed to delete webhook: {e}")
        logger.info("Test Bot initialized successfully")
    
    async def shutdown(self):
        """Shutdown all components"""
        await self.db.close()
        await self.text_extractor.close()
        await self.external_tracker.close()
        await self.bot.session.close()
        logger.info("Test Bot shutdown completed")
    
    async def cmd_start(self, message: Message):
        """Handle /start command"""
        user = message.from_user
        if user:
            await self.db.save_user(
                telegram_user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
        
        welcome_text = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Article Storage Bot - –¢–ï–°–¢–û–í–ê–Ø –í–ï–†–°–ò–Ø!**

üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name if user else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!

üì∞ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—Ç–∞—Ç—å–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

üî¨ **–¢–ï–°–¢–û–í–û–ï –û–ö–†–£–ñ–ï–ù–ò–ï**
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É
‚Ä¢ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞

üìù **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é
2. –ë–æ—Ç –∏–∑–≤–ª–µ—á–µ—Ç –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç
3. –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é
4. –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –°–ø—Ä–∞–≤–∫–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é

üöÄ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é –¥–ª—è –Ω–∞—á–∞–ª–∞!**
        """
        
        # Create inline keyboard
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
            callback_data="stats:main"
        ))
        builder.add(types.InlineKeyboardButton(
            text="üîó –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", 
            callback_data="track_external:main"
        ))
        builder.add(types.InlineKeyboardButton(
            text="üåê –í–µ–±-–∞–¥–º–∏–Ω–∫–∞", 
            url="https://tg-article-bot-api-production-12d6.up.railway.app"
        ))
        
        await message.answer(welcome_text, reply_markup=builder.as_markup())
    
    async def cmd_help(self, message: Message):
        """Handle /help command"""
        help_text = """
üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ Article Storage Bot - –¢–ï–°–¢–û–í–ê–Ø –í–ï–†–°–ò–Ø**

üî¨ **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è:**
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
‚Ä¢ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏
‚Ä¢ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

üì∞ **–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–µ–π:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ URL —Å—Ç–∞—Ç—å–∏
2. –ë–æ—Ç –∏–∑–≤–ª–µ—á–µ—Ç —Ç–µ–∫—Å—Ç –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
3. –í—ã–ø–æ–ª–Ω–∏—Ç –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é:
   ‚Ä¢ –ë–∞–∑–æ–≤–∞—è (rule-based)
   ‚Ä¢ AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
   ‚Ä¢ BART –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
   ‚Ä¢ –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
4. –°–æ—Ö—Ä–∞–Ω–∏—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
5. –ü–æ–∫–∞–∂–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑

üè∑Ô∏è **–°–∏—Å—Ç–µ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–º—ã
‚Ä¢ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–≥–∏
‚Ä¢ –û—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:**
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

üîß **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

‚ùì **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?** –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        await message.answer(help_text)
    
    async def cmd_stats(self, message: Message):
        """Handle /stats command"""
        try:
            stats = await self.db.get_stats()
            
            stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –¢–ï–°–¢–û–í–ê–Ø –í–ï–†–°–ò–Ø**

üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {stats.get('total_articles', 0)}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('unique_users', 0)}
‚Ä¢ –Ø–∑—ã–∫–æ–≤: {stats.get('languages_count', 0)}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {stats.get('avg_text_length', 0):.0f} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞—Ç—å—è: {stats.get('last_article_date', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

üè∑Ô∏è **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:**
‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(stats.get('top_categories', ['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö']))}
‚Ä¢ –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {stats.get('categories_count', 0)}

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('active_users', 0)}
‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: {stats.get('new_users_today', 0)}

üî¨ **–¢–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**
‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats.get('avg_processing_time', 0):.2f} —Å–µ–∫
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {stats.get('extraction_success_rate', 0):.1%}
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏: {stats.get('categorization_accuracy', 0):.1%}

üìù *–î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö*
            """
            
            # Create inline keyboard for detailed stats
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                callback_data="stats:detailed"
            ))
            builder.add(types.InlineKeyboardButton(
                text="üåê –í–µ–±-–∞–¥–º–∏–Ω–∫–∞", 
                url="https://tg-article-bot-api-production-12d6.up.railway.app"
            ))
            
            await message.answer(stats_text, reply_markup=builder.as_markup())
            
        except Exception as e:
            logger.error(f"Error getting stats: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def cmd_cancel(self, message: Message):
        """Handle /cancel command"""
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    async def process_message(self, message: Message):
        """Process incoming messages"""
        if not message.text:
            return
        
        text = message.text.strip()
        
        # Check if it's a URL
        if text.startswith(('http://', 'https://')):
            await self.process_article_url(message, text)
        else:
            await message.answer(
                "üîó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n"
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
                "/help - –°–ø—Ä–∞–≤–∫–∞\n"
                "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
            )
    
    async def process_article_url(self, message: Message, url: str):
        """Process article URL"""
        logger.info(f"Processing new message from user {message.from_user.id}: {url}...")
        
        # Send initial status message
        status_msg = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç–∞—Ç—å—é...")
        
        try:
            # Extract content
            await status_msg.edit_text("üìñ –ò–∑–≤–ª–µ–∫–∞—é –∫–æ–Ω—Ç–µ–Ω—Ç...")
            content = await self.text_extractor.extract_from_url(url)
            
            if not content or not content.get('text'):
                await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —Å—Ç–∞—Ç—å–∏")
                return
            
            # Detect language and basic categorize
            await status_msg.edit_text("üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç...")
            language = self.categorizer.detect_language(content['text'])
            categories = self.categorizer.categorize_article(content['text'], content['title'])
            
            # Advanced categorization with OpenAI (if available)
            advanced_categories = None
            try:
                if self.advanced_categorizer.is_available():
                    await status_msg.edit_text("ü§ñ –í—ã–ø–æ–ª–Ω—è—é —É–≥–ª—É–±–ª–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é...")
                    advanced_categories = await self.advanced_categorizer.categorize_article(
                        content['text'], content['title'], language, content.get('keywords')
                    )
                    logger.info(f"Advanced categorization completed: {advanced_categories['primary_category']}")
            except Exception as e:
                logger.error(f"Advanced categorization failed: {e}")
            
            # Generate summary (use AI summary if available)
            summary = advanced_categories.get('summary') if advanced_categories else None
            if not summary:
                summary = content.get('summary') or self.text_extractor.generate_summary(content['text'])
            
            # Save article
            user_id = message.from_user.id if message.from_user else None
            article_id, _ = await self.db.save_article(
                title=content['title'],
                text=content['text'],
                summary=summary,
                source=content['source'],
                author=content['author'],
                original_link=url,
                categories_advanced=advanced_categories,
                language=language,
                telegram_user_id=user_id
            )
            
            # Update categories
            await self.db.update_article_categories(article_id, categories)
            
            # Success message with advanced categorization info
            success_text = f"‚úÖ *–°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! - –¢–ï–°–¢–û–í–ê–Ø –í–ï–†–°–ò–Ø*\n\n"
            if content['title']:
                success_text += f"üì∞ *–ó–∞–≥–æ–ª–æ–≤–æ–∫:* {content['title'][:100]}...\n"
            
            # Show dual categorization if available
            if advanced_categories:
                success_text += "\nü§ñ **AI –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è:**\n"
                
                # AI-based categorization
                ai_cat = advanced_categories.get('ai_categorization')
                if ai_cat:
                    success_text += f"üéØ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {ai_cat.get('primary_category_label', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    if ai_cat.get('subcategories'):
                        success_text += f"üìÇ *–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:* {', '.join(ai_cat['subcategories'])}\n"
                    if ai_cat.get('keywords'):
                        success_text += f"üè∑Ô∏è *–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:* {', '.join(ai_cat['keywords'][:4])}\n"
                    success_text += f"üé≤ *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {ai_cat.get('confidence', 0):.1%}\n"
                
                # Topic clustering
                topic_cat = advanced_categories.get('topic_clustering')
                if topic_cat:
                    success_text += "\nüîç **–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è:**\n"
                    success_text += f"üìä *–¢–µ–º–∞:* {topic_cat.get('topic_label', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    if topic_cat.get('topic_keywords'):
                        success_text += f"üè∑Ô∏è *–ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã:* {', '.join(topic_cat['topic_keywords'][:4])}\n"
                    success_text += f"üìà *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {topic_cat.get('confidence', 0):.1%}\n"
                
                # BART categorization  
                bart_cat = advanced_categories.get('bart_categorization')
                if bart_cat:
                    method = bart_cat.get('method', '')
                    if method == 'bart_disabled':
                        success_text += "\nü§ñ **BART –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:** ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
                        success_text += "üìã *–°—Ç–∞—Ç—É—Å:* Transformers –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n"
                    elif method == 'rule_based_classification':
                        success_text += "\nüîß **Rule-based –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:**\n"
                        success_text += f"üéØ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {bart_cat.get('primary_category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        if bart_cat.get('matched_keywords'):
                            success_text += f"üîë *–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã:* {', '.join(bart_cat['matched_keywords'][:3])}\n"
                        success_text += f"üé≤ *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {bart_cat.get('confidence', 0):.1%}\n"
                    elif method == 'bart_zero_shot':
                        success_text += "\nü§ñ **BART –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:**\n"
                        success_text += f"üéØ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {bart_cat.get('primary_category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        if bart_cat.get('categories'):
                            top_cats = [f"{cat['category']} ({cat['confidence']:.1%})" for cat in bart_cat['categories'][:2]]
                            success_text += f"üìã *–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:* {', '.join(top_cats)}\n"
                        success_text += f"üé≤ *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {bart_cat.get('confidence', 0):.1%}\n"
                    else:
                        success_text += f"\nüîß **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:**\n"
                        success_text += f"üéØ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {bart_cat.get('primary_category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        success_text += f"üé≤ *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {bart_cat.get('confidence', 0):.1%}\n"
                
                # Fallback to legacy format
                if not ai_cat and not topic_cat and not bart_cat:
                    success_text += f"üéØ *–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:* {advanced_categories.get('primary_category_label', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    if advanced_categories.get('subcategories'):
                        success_text += f"üìÇ *–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:* {', '.join(advanced_categories['subcategories'])}\n"
                    if advanced_categories.get('keywords'):
                        success_text += f"üè∑Ô∏è *–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:* {', '.join(advanced_categories['keywords'][:5])}\n"
                    success_text += f"üé≤ *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {advanced_categories.get('confidence', 0):.1%}\n"
            else:
                # Basic categorization
                success_text += f"üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {categories[0] if categories else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                if len(categories) > 1:
                    success_text += f"üìÇ *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ:* {', '.join(categories[1:3])}\n"
            
            # Add basic info
            success_text += f"\nüìè *–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:* {len(content['text'])} —Å–∏–º–≤–æ–ª–æ–≤\n"
            success_text += f"üåê *–Ø–∑—ã–∫:* {language}\n"
            success_text += f"üìÖ *–î–∞—Ç–∞:* {content.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            success_text += f"üë§ *–ê–≤—Ç–æ—Ä:* {content.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            
            # Add test environment indicator
            success_text += f"\nüî¨ *–¢–ï–°–¢–û–í–ê–Ø –í–ï–†–°–ò–Ø*\n"
            success_text += f"üìä ID —Å—Ç–∞—Ç—å–∏: {article_id}\n"
            success_text += f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É\n"
            
            # Create inline keyboard
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                callback_data="stats:main"
            ))
            builder.add(types.InlineKeyboardButton(
                text="üåê –í–µ–±-–∞–¥–º–∏–Ω–∫–∞", 
                url="https://tg-article-bot-api-production-12d6.up.railway.app"
            ))
            
            await status_msg.edit_text(success_text, reply_markup=builder.as_markup())
            
        except Exception as e:
            logger.error(f"Error processing URL: {e}")
            await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—å–∏: {str(e)}")
    
    async def process_categories(self, message: Message, state: FSMContext):
        """Process categories input"""
        # Implementation for category processing
        pass
    
    async def callback_add_categories(self, callback: CallbackQuery, state: FSMContext):
        """Handle add categories callback"""
        # Implementation for adding categories
        pass
    
    async def callback_done(self, callback: CallbackQuery, state: FSMContext):
        """Handle done callback"""
        # Implementation for done action
        pass
    
    async def callback_show_stats(self, callback: CallbackQuery):
        """Handle stats callback"""
        # Implementation for showing stats
        pass
    
    async def callback_track_external(self, callback: CallbackQuery):
        """Handle track external callback"""
        # Implementation for tracking external sources
        pass
    
    async def handle_message_reaction(self, event: MessageReactionUpdated):
        """Handle message reactions"""
        # Implementation for message reactions
        pass
    
    async def handle_message_reaction_count(self, event: MessageReactionCountUpdated):
        """Handle message reaction count updates"""
        # Implementation for reaction count updates
        pass
    
    async def start_polling(self):
        """Start the bot"""
        await self.initialize()
        logger.info("Starting test bot polling...")
        await self.dp.start_polling(self.bot)

async def main():
    """Main function"""
    bot = ArticleBotTest()
    try:
        await bot.start_polling()
    except KeyboardInterrupt:
        logger.info("Received interrupt signal")
    finally:
        await bot.shutdown()

if __name__ == "__main__":
    asyncio.run(main())
