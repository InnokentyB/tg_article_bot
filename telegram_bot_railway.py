"""
Telegram bot integrated with Railway API
"""
import asyncio
import logging
import os
from typing import Optional, Dict, Any

# Load environment variables from .env file
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from config_railway import RailwayConfig
from railway_api_client import RailwayAPIClient
from text_extractor import TextExtractor

logger = logging.getLogger(__name__)

class ArticleStates(StatesGroup):
    waiting_for_categories = State()

class RailwayArticleBot:
    """Telegram bot integrated with Railway API"""
    
    def __init__(self):
        self.config = RailwayConfig()
        
        # Validate configuration
        if not self.config.validate_railway_bot():
            raise ValueError("Invalid Railway bot configuration")
        
        self.token = self.config.ARTICLE_BOT_TOKEN
        self.bot = Bot(token=self.token)
        self.storage = MemoryStorage()
        self.dp = Dispatcher(storage=self.storage)
        
        # Initialize components
        self.text_extractor = TextExtractor()
        self.railway_client = RailwayAPIClient()
        
        # Register handlers
        self.setup_handlers()
        
        logger.info("Railway bot initialized successfully")
    
    def setup_handlers(self):
        """Setup message handlers"""
        # Commands
        self.dp.message(Command('start'))(self.cmd_start)
        self.dp.message(Command('help'))(self.cmd_help)
        self.dp.message(Command('stats'))(self.cmd_stats)
        self.dp.message(Command('status'))(self.cmd_status)
        self.dp.message(Command('cancel'))(self.cmd_cancel)
        
        # FSM states
        self.dp.message(ArticleStates.waiting_for_categories)(self.process_categories)
        
        # General message handler
        self.dp.message()(self.process_message)
        
        # Callback handlers
        self.dp.callback_query(lambda c: c.data and c.data.startswith('add_categories:'))(self.callback_add_categories)
        self.dp.callback_query(lambda c: c.data and c.data.startswith('done:'))(self.callback_done)
        self.dp.callback_query(lambda c: c.data and c.data.startswith('stats:'))(self.callback_show_stats)
    
    async def initialize(self):
        """Initialize bot components"""
        await self.text_extractor.initialize()
        
        # Test Railway API connection
        connection_status = await self.railway_client.test_connection()
        logger.info(f"Railway API connection status: {connection_status}")
        
        # Force delete webhook
        try:
            await self.bot.delete_webhook(drop_pending_updates=True)
            logger.info("Webhook deleted successfully")
        except Exception as e:
            logger.warning(f"Failed to delete webhook: {e}")
        
        logger.info("Railway bot initialized successfully")
    
    async def shutdown(self):
        """Shutdown bot components"""
        await self.text_extractor.close()
        await self.bot.session.close()
        logger.info("Railway bot shutdown completed")
    
    async def cmd_start(self, message: Message):
        """Handle /start command"""
        user = message.from_user
        
        # Create/update user in Railway API
        user_data = {
            'telegram_user_id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name
        }
        
        try:
            await self.railway_client.create_user(user_data)
        except Exception as e:
            logger.error(f"Failed to create user: {e}")
        
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            "ü§ñ –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å—è–º–∏, –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å Railway API.\n\n"
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é, –∏ —è:\n"
            "‚Ä¢ –ò–∑–≤–ª–µ–∫—É —Ç–µ–∫—Å—Ç –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n"
            "üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/status - —Å—Ç–∞—Ç—É—Å API\n"
            "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
        )
        
        await message.answer(welcome_text)
    
    async def cmd_help(self, message: Message):
        """Handle /help command"""
        help_text = (
            "üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**\n\n"
            "üîó **–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—å–∏:**\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é, –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n"
            "‚Ä¢ –ò–∑–≤–ª–µ–∫—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—é –≤ –±–∞–∑—É\n"
            "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n"
            "üìä **–ö–æ–º–∞–Ω–¥—ã:**\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å API\n"
            "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
            "üè∑Ô∏è **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n"
            "–ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏\n\n"
            "üí° **–°–æ–≤–µ—Ç—ã:**\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–∞–π—Ç–æ–≤\n"
            "‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–º–æ–≥–∞—é—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å–∏\n"
            "‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Railway"
        )
        
        await message.answer(help_text, parse_mode='Markdown')
    
    async def cmd_stats(self, message: Message):
        """Handle /stats command"""
        try:
            stats = await self.railway_client.get_statistics()
            
            if stats:
                stats_text = (
                    "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Railway API**\n\n"
                    f"üìù –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {stats.get('total_articles', 'N/A')}\n"
                    f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 'N/A')}\n"
                    f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {stats.get('total_categories', 'N/A')}\n"
                    f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞—Ç—å—è: {stats.get('last_article_date', 'N/A')}\n\n"
                    f"üîÑ –°—Ç–∞—Ç—É—Å API: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
                )
            else:
                stats_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
                
        except Exception as e:
            logger.error(f"Failed to get stats: {e}")
            stats_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        
        await message.answer(stats_text, parse_mode='Markdown')
    
    async def cmd_status(self, message: Message):
        """Handle /status command"""
        try:
            status = await self.railway_client.test_connection()
            
            if status['connected']:
                status_text = (
                    "üü¢ **–°—Ç–∞—Ç—É—Å Railway API**\n\n"
                    f"üåê API URL: `{status['api_url']}`\n"
                    f"‚úÖ Health Check: –†–∞–±–æ—Ç–∞–µ—Ç\n"
                    f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {'–†–∞–±–æ—Ç–∞–µ—Ç' if status['categories_endpoint'] else '–û—à–∏–±–∫–∞'}\n"
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {'–†–∞–±–æ—Ç–∞–µ—Ç' if status['stats_endpoint'] else '–û—à–∏–±–∫–∞'}\n"
                    f"üïê –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {status['timestamp']}"
                )
            else:
                status_text = (
                    "üî¥ **–°—Ç–∞—Ç—É—Å Railway API**\n\n"
                    f"‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n"
                    f"üåê API URL: `{status['api_url']}`\n"
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {status.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    f"üïê –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {status['timestamp']}"
                )
                
        except Exception as e:
            logger.error(f"Failed to check status: {e}")
            status_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞"
        
        await message.answer(status_text, parse_mode='Markdown')
    
    async def cmd_cancel(self, message: Message, state: FSMContext):
        """Handle /cancel command"""
        current_state = await state.get_state()
        if current_state:
            await state.clear()
            await message.answer("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã")
    
    async def process_message(self, message: Message, state: FSMContext):
        """Process incoming messages"""
        # Check if we're waiting for categories
        current_state = await state.get_state()
        if current_state == ArticleStates.waiting_for_categories:
            return
        
        # Check if message contains a URL
        if message.entities:
            for entity in message.entities:
                if entity.type == "url":
                    url = message.text[entity.offset:entity.offset + entity.length]
                    await self.process_article_url(message, url)
                    return
        
        # Check if message text looks like a URL
        if message.text and ('http://' in message.text or 'https://' in message.text):
            await self.process_article_url(message, message.text)
            return
        
        # If no URL found, show help
        await message.answer(
            "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
        )
    
    async def process_article_url(self, message: Message, url: str):
        """Process article URL and extract content"""
        await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç–∞—Ç—å—é...")
        
        try:
            # Extract text from URL
            extracted_data = await self.text_extractor.extract_from_url(url)
            
            if not extracted_data or not extracted_data.get('text'):
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Å—Ç–∞—Ç—å–∏")
                return
            
            # Prepare article data for Railway API
            article_data = {
                'title': extracted_data.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'),
                'text': extracted_data['text'],
                'summary': extracted_data.get('summary', ''),
                'source': url,
                'original_link': url,
                'telegram_user_id': message.from_user.id,
                'language': extracted_data.get('language', 'ru'),
                'categories_auto': extracted_data.get('categories', [])
            }
            
            # Save article to Railway API
            saved_article = await self.railway_client.create_article(article_data)
            
            if saved_article:
                # Show success message with categories
                await self.show_article_saved(message, saved_article, extracted_data.get('categories', []))
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç—å—é –≤ Railway API")
                
        except Exception as e:
            logger.error(f"Error processing article: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—å–∏")
    
    async def show_article_saved(self, message: Message, article: Dict[str, Any], auto_categories: list):
        """Show article saved successfully with category options"""
        # Get available categories from Railway API
        try:
            available_categories = await self.railway_client.get_categories()
        except Exception as e:
            logger.error(f"Failed to get categories: {e}")
            available_categories = []
        
        # Combine auto categories with available ones
        all_categories = list(set(auto_categories + available_categories))
        
        # Create keyboard for category selection
        builder = InlineKeyboardBuilder()
        
        # Add auto categories first
        for category in auto_categories[:5]:  # Limit to 5 categories
            builder.button(
                text=f"‚úÖ {category}",
                callback_data=f"add_categories:{article['id']}:{category}"
            )
        
        # Add other available categories
        for category in available_categories[:10]:  # Limit to 10 total
            if category not in auto_categories:
                builder.button(
                    text=f"üè∑Ô∏è {category}",
                    callback_data=f"add_categories:{article['id']}:{category}"
                )
        
        builder.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"done:{article['id']}")
        
        # Adjust layout
        builder.adjust(2)
        
        success_text = (
            f"‚úÖ **–°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!**\n\n"
            f"üìù **{article['title']}**\n"
            f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫: {article['source']}\n"
            f"üìä ID: `{article['id']}`\n\n"
            f"üè∑Ô∏è **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n"
            f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ: {', '.join(auto_categories[:3])}\n"
            f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(available_categories[:5])}\n\n"
            f"üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
        )
        
        await message.answer(success_text, reply_markup=builder.as_markup(), parse_mode='Markdown')
    
    async def process_categories(self, message: Message, state: FSMContext):
        """Process category input from user"""
        # This would handle manual category input
        # For now, just show help
        await message.answer(
            "üè∑Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
        )
    
    async def callback_add_categories(self, callback: CallbackQuery):
        """Handle category selection callback"""
        try:
            data = callback.data.split(':')
            article_id = int(data[1])
            category = data[2]
            
            # Update article with selected category
            update_data = {
                'categories_user': [category]
            }
            
            updated_article = await self.railway_client.update_article(article_id, update_data)
            
            if updated_article:
                await callback.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                
        except Exception as e:
            logger.error(f"Error adding category: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    
    async def callback_done(self, callback: CallbackQuery):
        """Handle done callback"""
        try:
            data = callback.data.split(':')
            article_id = int(data[1])
            
            # Get final article data
            article = await self.railway_client.get_article(article_id)
            
            if article:
                final_text = (
                    f"üéâ **–°—Ç–∞—Ç—å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!**\n\n"
                    f"üìù **{article['title']}**\n"
                    f"üîó ID: `{article['id']}`\n"
                    f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(article.get('categories_user', []) + article.get('categories_auto', []))}\n\n"
                    f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Railway API\n"
                    f"üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
                )
            else:
                final_text = "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            
            await callback.message.edit_text(final_text, parse_mode='Markdown')
            await callback.answer("‚úÖ –ì–æ—Ç–æ–≤–æ!")
            
        except Exception as e:
            logger.error(f"Error in done callback: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏")
    
    async def callback_show_stats(self, callback: CallbackQuery):
        """Handle stats callback"""
        try:
            stats = await self.railway_client.get_statistics()
            
            if stats:
                stats_text = (
                    "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Railway API**\n\n"
                    f"üìù –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {stats.get('total_articles', 'N/A')}\n"
                    f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 'N/A')}\n"
                    f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {stats.get('total_categories', 'N/A')}\n"
                    f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞—Ç—å—è: {stats.get('last_article_date', 'N/A')}"
                )
            else:
                stats_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
            
            await callback.message.edit_text(stats_text, parse_mode='Markdown')
            await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"Error showing stats: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def run(self):
        """Run the bot"""
        try:
            await self.initialize()
            logger.info("Starting Railway bot...")
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"Bot error: {e}")
        finally:
            await self.shutdown()

async def main():
    """Main function"""
    # Setup logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    try:
        bot = RailwayArticleBot()
        await bot.run()
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")

if __name__ == "__main__":
    asyncio.run(main())
