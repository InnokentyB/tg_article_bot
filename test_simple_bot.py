#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π Telegram –±–æ—Ç –±–µ–∑ —Ç—è–∂–µ–ª—ã—Ö ML –º–æ–¥–µ–ª–µ–π
"""
import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage

# Load environment variables from .env file
from dotenv import load_dotenv
load_dotenv()

from database import DatabaseManager
from text_extractor import TextExtractor
from article_categorizer import ArticleCategorizer

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SimpleArticleBot:
    def __init__(self):
        self.token = os.getenv('ARTICLE_BOT_TOKEN')
        if not self.token:
            raise ValueError("ARTICLE_BOT_TOKEN environment variable is required")
        
        self.bot = Bot(token=self.token)
        storage = MemoryStorage()
        self.dp = Dispatcher(storage=storage)
        self.db = DatabaseManager()
        self.text_extractor = TextExtractor()
        self.categorizer = ArticleCategorizer()
        
        # Register handlers
        self.setup_handlers()
    
    def setup_handlers(self):
        """Setup message handlers"""
        self.dp.message(Command('start'))(self.cmd_start)
        self.dp.message(Command('help'))(self.cmd_help)
        self.dp.message(Command('stats'))(self.cmd_stats)
        self.dp.message()(self.process_message)
    
    async def initialize(self):
        """Initialize all components"""
        await self.db.initialize()
        await self.text_extractor.initialize()
        
        # Force delete webhook to ensure polling works
        try:
            await self.bot.delete_webhook(drop_pending_updates=True)
            logger.info("Webhook deleted successfully")
        except Exception as e:
            logger.warning(f"Failed to delete webhook: {e}")
        logger.info("Simple bot initialized successfully")
    
    async def shutdown(self):
        """Shutdown all components"""
        await self.db.close()
        await self.text_extractor.close()
        await self.bot.session.close()
        logger.info("Simple bot shutdown completed")
    
    async def cmd_start(self, message: Message):
        """Handle /start command"""
        user = message.from_user
        if user:
            await self.db.save_user(
                telegram_user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
        
        welcome_text = """
ü§ñ –ü—Ä–æ—Å—Ç–æ–π Article Management Bot

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:
‚Ä¢ –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ (–º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)
‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é

–ö–æ–º–∞–Ω–¥—ã:
/help - –°–ø—Ä–∞–≤–∫–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        await message.answer(welcome_text.strip())
    
    async def cmd_help(self, message: Message):
        """Handle /help command"""
        help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ (–º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)
2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é
3. –ë–æ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Å—Ç–∞—Ç—å—é –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

–§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å—Å—ã–ª–æ–∫
‚Ä¢ –ë–∞–∑–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
‚Ä¢ –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        await message.answer(help_text.strip())
    
    async def cmd_stats(self, message: Message):
        """Handle /stats command"""
        try:
            user_id = message.from_user.id
            user_articles = await self.db.get_articles(user_id=user_id, limit=100)
            total_articles = await self.db.get_articles_count()
            
            stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

–í–∞—à–∏ —Å—Ç–∞—Ç—å–∏: {len(user_articles)}
–í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {total_articles}
            """
            await message.answer(stats_text.strip())
        except Exception as e:
            logger.error(f"Error getting stats: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def process_message(self, message: Message):
        """Process incoming messages"""
        try:
            text = message.text
            if not text:
                await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é")
                return
            
            # Check if it's a URL
            if text.startswith(('http://', 'https://')):
                await message.answer("üîç –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ —Å—Å—ã–ª–∫–∏...")
                extracted_text = await self.text_extractor.extract_text(text)
                if extracted_text:
                    await self.save_article(message, extracted_text, text)
                else:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Å—Å—ã–ª–∫–∏")
            else:
                # Check minimum length
                if len(text) < 50:
                    await message.answer("‚ùå –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤")
                    return
                
                await self.save_article(message, text)
                
        except Exception as e:
            logger.error(f"Error processing message: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    async def save_article(self, message: Message, text: str, source: str = None):
        """Save article to database"""
        try:
            user_id = message.from_user.id
            
            # Basic categorization
            categories = self.categorizer.categorize_text(text)
            
            # Save article
            article_id = await self.db.save_article(
                title=text[:100] + "..." if len(text) > 100 else text,
                text=text,
                source=source,
                telegram_user_id=user_id,
                categories_auto=categories
            )
            
            response = f"""
‚úÖ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!

ID: {article_id}
–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(categories) if categories else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}
            """
            await message.answer(response.strip())
            
        except Exception as e:
            logger.error(f"Error saving article: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏")
    
    async def start_polling(self):
        """Start the bot"""
        await self.initialize()
        logger.info("Starting simple bot polling...")
        await self.dp.start_polling(self.bot)

async def main():
    """Main function"""
    logger.info("Starting Simple Telegram bot...")
    
    # Check required environment variables
    if not os.getenv('DATABASE_URL'):
        logger.error("DATABASE_URL environment variable is required")
        return
    
    if not os.getenv('ARTICLE_BOT_TOKEN'):
        logger.error("ARTICLE_BOT_TOKEN environment variable is required")
        return
    
    bot = SimpleArticleBot()
    try:
        await bot.start_polling()
    except KeyboardInterrupt:
        logger.info("Bot shutdown requested")
    except Exception as e:
        logger.error(f"Bot error: {e}")
    finally:
        await bot.shutdown()

if __name__ == "__main__":
    asyncio.run(main())
