services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: article-bot-db
    environment:
      POSTGRES_DB: article_bot
      POSTGRES_USER: article_bot
      POSTGRES_PASSWORD: article_bot_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U article_bot"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: article-bot-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Light ML Service (с внешними API)
  ml-service:
    build:
      context: ./ml-service-light
      dockerfile: Dockerfile
    container_name: article-bot-ml-light
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # API Service (легкий)
  api:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: article-bot-api
    environment:
      - DATABASE_URL=postgresql://article_bot:article_bot_password@postgres:5432/article_bot
      - REDIS_URL=redis://redis:6379/0
      - ML_SERVICE_URL=http://ml-service:8000
      - ARTICLE_BOT_TOKEN=${ARTICLE_BOT_TOKEN}
    ports:
      - "5001:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ml-service:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Bot Service (легкий)
  bot:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: article-bot-telegram
    environment:
      - DATABASE_URL=postgresql://article_bot:article_bot_password@postgres:5432/article_bot
      - REDIS_URL=redis://redis:6379/0
      - ML_SERVICE_URL=http://ml-service:8000
      - ARTICLE_BOT_TOKEN=${ARTICLE_BOT_TOKEN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ml-service:
        condition: service_started
    command: ["python", "telegram_bot_ml.py"]
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: article-bot-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.microservices.conf:/etc/nginx/nginx.conf
    depends_on:
      - api
      - ml-service
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
