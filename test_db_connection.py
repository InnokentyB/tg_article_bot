#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import asyncpg
import os

async def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        database_url = "postgresql://article_bot:article_bot_password@localhost:5432/article_bot"
        
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        conn = await asyncpg.connect(database_url)
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        tables = await conn.fetch("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
        """)
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        for table in tables:
            print(f"   - {table['table_name']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        articles_count = await conn.fetchval("SELECT COUNT(*) FROM articles")
        users_count = await conn.fetchval("SELECT COUNT(*) FROM users")
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –°—Ç–∞—Ç–µ–π: {articles_count}")
        print(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        
        await conn.close()
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

async def test_redis_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
    try:
        import redis.asyncio as redis
        
        print("\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis...")
        r = redis.Redis(host='localhost', port=6379, decode_responses=True)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º ping
        await r.ping()
        print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å/—á—Ç–µ–Ω–∏–µ
        await r.set('test_key', 'test_value')
        value = await r.get('test_key')
        print(f"‚úÖ Redis —Ç–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è: {value}")
        
        await r.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Redis: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ —Å–µ—Ä–≤–∏—Å–∞–º...\n")
    
    await test_database_connection()
    await test_redis_connection()
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    asyncio.run(main())
