#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ–±–æ–∏—Ö –±–æ—Ç–æ–≤
"""
import subprocess
import asyncio
from dotenv import load_dotenv
import os

def check_bot_processes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–æ–≤...")
    
    try:
        result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
        output = result.stdout
        
        prod_running = 'telegram_bot.py' in output
        test_running = 'telegram_bot_test.py' in output
        simple_test_running = 'simple_test_bot.py' in output
        
        print(f"   üè≠ –ü—Ä–æ–¥–∞–∫—à–µ–Ω –±–æ—Ç: {'‚úÖ –ó–∞–ø—É—â–µ–Ω' if prod_running else '‚ùå –ù–µ –∑–∞–ø—É—â–µ–Ω'}")
        print(f"   üî¨ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç: {'‚úÖ –ó–∞–ø—É—â–µ–Ω' if test_running else '‚ùå –ù–µ –∑–∞–ø—É—â–µ–Ω'}")
        print(f"   üß™ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π: {'‚úÖ –ó–∞–ø—É—â–µ–Ω' if simple_test_running else '‚ùå –ù–µ –∑–∞–ø—É—â–µ–Ω'}")
        
        return {
            'production': prod_running,
            'test': test_running,
            'simple_test': simple_test_running
        }
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        return {'production': False, 'test': False, 'simple_test': False}

async def test_bot_connections():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç–∞–º"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–æ—Ç–∞–º...")
    
    load_dotenv()
    
    results = {}
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω –±–æ—Ç–∞
    prod_token = os.getenv('ARTICLE_BOT_TOKEN')
    if prod_token:
        try:
            from aiogram import Bot
            
            bot = Bot(token=prod_token)
            bot_info = await bot.get_me()
            print(f"   ‚úÖ –ü—Ä–æ–¥–∞–∫—à–µ–Ω –±–æ—Ç: {bot_info.first_name} (@{bot_info.username})")
            results['production'] = True
            
            await bot.session.close()
        except Exception as e:
            print(f"   ‚ùå –ü—Ä–æ–¥–∞–∫—à–µ–Ω –±–æ—Ç: {e}")
            results['production'] = False
    else:
        print("   ‚ùå –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        results['production'] = False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
    test_token = os.getenv('ARTICLE_BOT_TEST_TOKEN')
    if test_token:
        try:
            from aiogram import Bot
            
            bot = Bot(token=test_token)
            bot_info = await bot.get_me()
            print(f"   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç: {bot_info.first_name} (@{bot_info.username})")
            results['test'] = True
            
            await bot.session.close()
        except Exception as e:
            print(f"   ‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç: {e}")
            results['test'] = False
    else:
        print("   ‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        results['test'] = False
    
    return results

def show_instructions():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    print("\nüìù –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:")
    
    print("\nüè≠ –ü—Ä–æ–¥–∞–∫—à–µ–Ω –±–æ—Ç (@article_storage_bot):")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python telegram_bot.py")
    print("   2. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞: @article_storage_bot")
    print("   3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
    print("   4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é")
    
    print("\nüî¨ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç (@article_storage_test_bot):")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python run_test_bot.py")
    print("   2. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞: @article_storage_test_bot")
    print("   3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
    print("   4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é")
    
    print("\nüß™ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç (@article_storage_test_bot):")
    print("   1. –ó–∞–ø—É—â–µ–Ω: python simple_test_bot.py")
    print("   2. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞: @article_storage_test_bot")
    print("   3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
    print("   4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–æ–≤\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
    processes = check_bot_processes()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connections = asyncio.run(test_bot_connections())
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    show_instructions()
    
    print(f"\nüìã –ò–¢–û–ì:")
    if processes.get('production'):
        print("   ‚úÖ –ü—Ä–æ–¥–∞–∫—à–µ–Ω –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    else:
        print("   ‚ùå –ü—Ä–æ–¥–∞–∫—à–µ–Ω –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
    
    if processes.get('test'):
        print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    else:
        print("   ‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
    
    if processes.get('simple_test'):
        print("   ‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    else:
        print("   ‚ùå –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
    
    if connections.get('production'):
        print("   ‚úÖ –ü—Ä–æ–¥–∞–∫—à–µ–Ω –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        print("   ‚ùå –ü—Ä–æ–¥–∞–∫—à–µ–Ω –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    if connections.get('test'):
        print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        print("   ‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if processes.get('simple_test'):
        print("   ‚Ä¢ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω - –º–æ–∂–µ—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")
        print("   ‚Ä¢ –ù–∞–π–¥–∏—Ç–µ @article_storage_test_bot –≤ Telegram")
        print("   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    else:
        print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –±–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: python simple_test_bot.py")

if __name__ == "__main__":
    main()
