#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API –±–µ–∑ pytest
"""
import asyncio
import httpx
import json

API_URL = 'https://tg-article-bot-api-production-12d6.up.railway.app'

async def test_api():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...")
    
    async with httpx.AsyncClient() as client:
        # –¢–µ—Å—Ç 1: –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞:")
        try:
            response = await client.get(f"{API_URL}/")
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                data = response.json()
                print(f"   –û—Ç–≤–µ—Ç: {data}")
                print("   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        # –¢–µ—Å—Ç 2: Health check
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç health check:")
        try:
            response = await client.get(f"{API_URL}/health")
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                data = response.json()
                print(f"   –û—Ç–≤–µ—Ç: {data}")
                print("   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        # –¢–µ—Å—Ç 3: API Health check
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç API health check:")
        try:
            response = await client.get(f"{API_URL}/api/health")
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                data = response.json()
                print(f"   –û—Ç–≤–µ—Ç: {data}")
                print("   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        # –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏:")
        try:
            article_data = {
                "text": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ. –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤—Å–µ –±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º.",
                "title": "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö",
                "source": "test"
            }
            response = await client.post(f"{API_URL}/articles", json=article_data)
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                data = response.json()
                print(f"   –û—Ç–≤–µ—Ç: {data}")
                print("   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        # –¢–µ—Å—Ç 5: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ —Å Habr
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏ —Å Habr:")
        try:
            article_data = {
                "text": "–¢—Ä–µ–Ω–¥—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ü–û ‚Äî –≤–∑–≥–ª—è–¥ InfoQ 2025. –ü–æ–∫–∞ –≤—Å–µ –≤–æ–∫—Ä—É–≥ –∞–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–∫—Ä—É—á–∏–≤–∞—é—Ç –±–æ–ª—å—à–∏–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏, –Ω–æ–≤—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –≤—Å—ë —á–∞—â–µ —É—Ö–æ–¥—è—Ç –≤ —Å—Ç–æ—Ä–æ–Ω—É –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö SLM –∏ –∞–≥–µ–Ω—Ç–Ω–æ–≥–æ –ò–ò. RAG —É–∂–µ —Å—Ç–∞–ª –ø–æ—á—Ç–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –Ω–∞–¥—Å—Ç—Ä–æ–π–∫–æ–π, —á—Ç–æ–±—ã –≤—ã—Ç—è–Ω—É—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ LLM, –∏ —Ç–µ–ø–µ—Ä—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä—ã —Å—Ç–∞—Ä–∞—é—Ç—Å—è –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—ã —Ç–∞–∫, —á—Ç–æ–±—ã –µ–≥–æ –±—ã–ª–æ –ø—Ä–æ—â–µ –≤—Å—Ç—Ä–æ–∏—Ç—å.",
                "title": "–¢—Ä–µ–Ω–¥—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ü–û ‚Äî –≤–∑–≥–ª—è–¥ InfoQ 2025",
                "source": "https://habr.com/ru/companies/otus/articles/942048/",
                "telegram_user_id": 123456789
            }
            response = await client.post(f"{API_URL}/articles", json=article_data)
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                data = response.json()
                print(f"   –û—Ç–≤–µ—Ç: {data}")
                print("   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        # –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π
        print("\n6Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π:")
        try:
            response = await client.get(f"{API_URL}/articles")
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                data = response.json()
                print(f"   –û—Ç–≤–µ—Ç: {data}")
                print("   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        # –¢–µ—Å—Ç 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n7Ô∏è‚É£ –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
        try:
            response = await client.get(f"{API_URL}/statistics")
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                data = response.json()
                print(f"   –û—Ç–≤–µ—Ç: {data}")
                print("   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        # –¢–µ—Å—Ç 8: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        print("\n8Ô∏è‚É£ –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞:")
        try:
            response = await client.get(f"{API_URL}/nonexistent")
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 404:
                print("   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404")
            else:
                print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

if __name__ == "__main__":
    asyncio.run(test_api())
