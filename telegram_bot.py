"""
Telegram bot for article management
"""
import asyncio
import logging
import os
from typing import Optional

# Load environment variables from .env file
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, MessageReactionUpdated, MessageReactionCountUpdated
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from database import DatabaseManager
from text_extractor import TextExtractor
from article_categorizer import ArticleCategorizer
from advanced_categorizer import AdvancedCategorizer
from telegram_reactions import TelegramReactionsTracker
from external_source_tracker import ExternalSourceTracker

logger = logging.getLogger(__name__)

class ArticleStates(StatesGroup):
    waiting_for_categories = State()

class ArticleBot:
    def __init__(self):
        # Use production token
        self.token = os.getenv('ARTICLE_BOT_TOKEN', '8016496837:AAHw5dv5b5X_Ad4GKBqVqzEH8izdS0aUytY')
        if not self.token:
            raise ValueError("ARTICLE_BOT_TOKEN environment variable is required")
        
        self.bot = Bot(token=self.token)
        # Use memory storage for FSM
        storage = MemoryStorage()
        self.dp = Dispatcher(storage=storage)
        self.db = DatabaseManager()
        self.text_extractor = TextExtractor()
        self.categorizer = ArticleCategorizer()
        self.advanced_categorizer = AdvancedCategorizer()
        self.reactions_tracker = TelegramReactionsTracker(self.db)
        self.external_tracker = ExternalSourceTracker(self.db)
        
        # Register handlers
        self.setup_handlers()
    
    def setup_handlers(self):
        """Setup message handlers - order matters!"""
        # Commands first
        self.dp.message(Command('start'))(self.cmd_start)
        self.dp.message(Command('help'))(self.cmd_help)
        self.dp.message(Command('stats'))(self.cmd_stats)
        self.dp.message(Command('cancel'))(self.cmd_cancel)
        
        # FSM states have priority over general message handler
        self.dp.message(ArticleStates.waiting_for_categories)(self.process_categories)
        
        # General message handler last
        self.dp.message()(self.process_message)
        
        # Callback handlers
        self.dp.callback_query(lambda c: c.data and c.data.startswith('add_categories:'))(self.callback_add_categories)
        self.dp.callback_query(lambda c: c.data and c.data.startswith('done:'))(self.callback_done)
        self.dp.callback_query(lambda c: c.data and c.data.startswith('stats:'))(self.callback_show_stats)
        self.dp.callback_query(lambda c: c.data and c.data.startswith('track_external:'))(self.callback_track_external)
        
        # Reaction handlers (requires bot to be admin in chat)
        self.dp.message_reaction()(self.handle_message_reaction)
        self.dp.message_reaction_count()(self.handle_message_reaction_count)
    
    async def initialize(self):
        """Initialize all components and force delete webhook"""
        await self.db.initialize()
        await self.text_extractor.initialize()
        await self.external_tracker.initialize()
        # Force delete webhook to ensure polling works
        try:
            await self.bot.delete_webhook(drop_pending_updates=True)
            logger.info("Webhook deleted successfully")
        except Exception as e:
            logger.warning(f"Failed to delete webhook: {e}")
        logger.info("Bot initialized successfully")
    
    async def shutdown(self):
        """Shutdown all components"""
        await self.db.close()
        await self.text_extractor.close()
        await self.external_tracker.close()
        await self.bot.session.close()
        logger.info("Bot shutdown completed")
    
    async def cmd_start(self, message: Message):
        """Handle /start command"""
        user = message.from_user
        if user:
            await self.db.save_user(
                telegram_user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
        
        welcome_text = """
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π!*

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –∫–∞—Ç–∞–ª–æ–≥–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å–∏. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:

üìù *–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏* - –ø—Ä—è–º–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
üîó *–°—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é* - —è –∏–∑–≤–ª–µ–∫—É —Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

–§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–µ–π
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
‚Ä¢ –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è

–ö–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        """
        
        await message.answer(welcome_text, parse_mode="Markdown")
    
    async def cmd_help(self, message: Message):
        """Handle /help command"""
        help_text = """
üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é:*
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é - —è –∏–∑–≤–ª–µ–∫—É —Ç–µ–∫—Å—Ç

*–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:*
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã (–ø–æ fingerprint)
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —è–∑—ã–∫ —Å—Ç–∞—Ç—å–∏
‚Ä¢ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

*–ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç:*
‚Ä¢ –Ø –ø–æ–∫–∞–∂—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–µ
‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö, –ª–∞–π–∫–∞—Ö –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
‚Ä¢ –î–∞—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞  
/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

*API –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:*
‚Ä¢ GET /api/articles - —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π
‚Ä¢ GET /api/articles/{id} - —Å—Ç–∞—Ç—å—è –ø–æ ID
‚Ä¢ PUT /api/articles/{id}/counters - –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏
        """
        
        await message.answer(help_text, parse_mode="Markdown")
    
    async def cmd_stats(self, message: Message):
        """Handle /stats command"""
        if not message.from_user:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        user_id = message.from_user.id
        
        # Get user's articles
        articles = await self.db.get_articles(user_id=user_id, limit=1000)
        
        if not articles:
            await message.answer("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π")
            return
        
        # Calculate stats
        total_articles = len(articles)
        categories = {}
        languages = {}
        
        for article in articles:
            # Count categories
            for cat in (article.get('categories_auto') or []):
                categories[cat] = categories.get(cat, 0) + 1
            
            # Count languages
            lang = article.get('language', 'unknown')
            languages[lang] = languages.get(lang, 0) + 1
        
        # Format stats
        stats_text = f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        stats_text += f"üìù –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: *{total_articles}*\n\n"
        
        if categories:
            stats_text += "üìÇ *–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
            for cat, count in sorted(categories.items(), key=lambda x: x[1], reverse=True):
                stats_text += f"‚Ä¢ {cat}: {count}\n"
            stats_text += "\n"
        
        if languages:
            stats_text += "üåê *–ü–æ —è–∑—ã–∫–∞–º:*\n"
            for lang, count in sorted(languages.items(), key=lambda x: x[1], reverse=True):
                lang_name = {'ru': '–†—É—Å—Å–∫–∏–π', 'en': 'English', 'unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}.get(lang, lang)
                stats_text += f"‚Ä¢ {lang_name}: {count}\n"
        
        await message.answer(stats_text, parse_mode="Markdown")
    
    async def cmd_cancel(self, message: Message, state: FSMContext):
        """Handle /cancel command"""
        await state.clear()
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    async def process_message(self, message: Message, state: FSMContext):
        """Process incoming messages (text or URLs) - only when NOT in FSM state"""
        current_state = await state.get_state()
        if current_state:
            # If user is in FSM state, this shouldn't be called
            logger.warning(f"process_message called while in state {current_state}")
            return
            
        if not message.text:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –∏–ª–∏ —Å—Å—ã–ª–∫—É")
            return
        
        text = message.text.strip()
        user_id = message.from_user.id if message.from_user else 0
        logger.info(f"Processing new message from user {user_id}: {text[:50]}...")
        
        # Check if it's a URL
        if self.text_extractor.is_valid_url(text):
            await self.process_url(message, text)
        else:
            await self.process_text(message, text)
    
    async def process_url(self, message: Message, url: str):
        """Process URL message"""
        status_msg = await message.answer("üîÑ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ —Å—Å—ã–ª–∫–∏...")
        
        try:
            # Extract content from URL
            content = await self.text_extractor.extract_from_url(url)
            
            if not content or not content['text']:
                await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Å—Å—ã–ª–∫–∏")
                return
            
            # Check for duplicates
            fingerprint = self.db.generate_fingerprint(content['text'])
            duplicate = await self.db.check_duplicate(fingerprint)
            
            if duplicate:
                await self.show_duplicate(status_msg, duplicate)
                return
            
            # Detect language and basic categorize
            language = self.categorizer.detect_language(content['text'])
            categories = self.categorizer.categorize_article(content['text'], content['title'])
            
            # Advanced categorization with OpenAI (if available)
            advanced_categories = None
            try:
                if self.advanced_categorizer.is_available():
                    await status_msg.edit_text("ü§ñ –í—ã–ø–æ–ª–Ω—è—é —É–≥–ª—É–±–ª–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é...")
                    advanced_categories = await self.advanced_categorizer.categorize_article(
                        content['text'], content['title'], language, content.get('keywords')
                    )
                    logger.info(f"Advanced categorization completed: {advanced_categories['primary_category']}")
            except Exception as e:
                logger.error(f"Advanced categorization failed: {e}")
            
            # Generate summary (use AI summary if available)
            summary = advanced_categories.get('summary') if advanced_categories else None
            if not summary:
                summary = content.get('summary') or self.text_extractor.generate_summary(content['text'])
            
            # Save article
            user_id = message.from_user.id if message.from_user else None
            article_id, _ = await self.db.save_article(
                title=content['title'],
                text=content['text'],
                summary=summary,
                source=content['source'],
                author=content['author'],
                original_link=url,
                categories_advanced=advanced_categories,
                language=language,
                telegram_user_id=user_id
            )
            
            # Update categories
            await self.db.update_article_categories(article_id, categories)
            
            # Success message with advanced categorization info
            success_text = f"‚úÖ *–°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!*\n\n"
            if content['title']:
                success_text += f"üì∞ *–ó–∞–≥–æ–ª–æ–≤–æ–∫:* {content['title'][:100]}...\n"
            
            # Show dual categorization if available
            if advanced_categories:
                success_text += "\nü§ñ **AI –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è:**\n"
                
                # AI-based categorization
                ai_cat = advanced_categories.get('ai_categorization')
                if ai_cat:
                    success_text += f"üéØ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {ai_cat.get('primary_category_label', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    if ai_cat.get('subcategories'):
                        success_text += f"üìÇ *–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:* {', '.join(ai_cat['subcategories'])}\n"
                    if ai_cat.get('keywords'):
                        success_text += f"üè∑Ô∏è *–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:* {', '.join(ai_cat['keywords'][:4])}\n"
                    success_text += f"üé≤ *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {ai_cat.get('confidence', 0):.1%}\n"
                
                # Topic clustering
                topic_cat = advanced_categories.get('topic_clustering')
                if topic_cat:
                    success_text += "\nüîç **–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è:**\n"
                    success_text += f"üìä *–¢–µ–º–∞:* {topic_cat.get('topic_label', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    if topic_cat.get('topic_keywords'):
                        success_text += f"üè∑Ô∏è *–ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã:* {', '.join(topic_cat['topic_keywords'][:4])}\n"
                    success_text += f"üìà *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {topic_cat.get('confidence', 0):.1%}\n"
                
                # BART categorization  
                bart_cat = advanced_categories.get('bart_categorization')
                if bart_cat:
                    method = bart_cat.get('method', '')
                    if method == 'bart_disabled':
                        success_text += "\nü§ñ **BART –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:** ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
                        success_text += "üìã *–°—Ç–∞—Ç—É—Å:* Transformers –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n"
                    elif method == 'rule_based_classification':
                        success_text += "\nüîß **Rule-based –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:**\n"
                        success_text += f"üéØ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {bart_cat.get('primary_category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        if bart_cat.get('matched_keywords'):
                            success_text += f"üîë *–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã:* {', '.join(bart_cat['matched_keywords'][:3])}\n"
                        success_text += f"üé≤ *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {bart_cat.get('confidence', 0):.1%}\n"
                    elif method == 'bart_zero_shot':
                        success_text += "\nü§ñ **BART –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:**\n"
                        success_text += f"üéØ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {bart_cat.get('primary_category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        if bart_cat.get('categories'):
                            top_cats = [f"{cat['category']} ({cat['confidence']:.1%})" for cat in bart_cat['categories'][:2]]
                            success_text += f"üìã *–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:* {', '.join(top_cats)}\n"
                        success_text += f"üé≤ *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {bart_cat.get('confidence', 0):.1%}\n"
                    else:
                        success_text += f"\nüîß **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:**\n"
                        success_text += f"üéØ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {bart_cat.get('primary_category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        success_text += f"üé≤ *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {bart_cat.get('confidence', 0):.1%}\n"
                
                # Fallback to legacy format
                if not ai_cat and not topic_cat and not bart_cat:
                    success_text += f"üéØ *–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:* {advanced_categories.get('primary_category_label', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    if advanced_categories.get('subcategories'):
                        success_text += f"üìÇ *–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:* {', '.join(advanced_categories['subcategories'])}\n"
                    if advanced_categories.get('keywords'):
                        success_text += f"üè∑Ô∏è *–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:* {', '.join(advanced_categories['keywords'][:5])}\n"
                    success_text += f"üé≤ *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {advanced_categories.get('confidence', 0):.1%}\n"
            else:
                success_text += f"üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:* {', '.join(categories)}\n"
            
            success_text += f"üåê *–Ø–∑—ã–∫:* {language}\n"
            success_text += f"üìä *ID:* {article_id}\n"
            
            if content['author']:
                success_text += f"‚úçÔ∏è *–ê–≤—Ç–æ—Ä:* {content['author']}\n"
            
            await status_msg.edit_text(success_text, parse_mode="Markdown")
            
            # Link article to message and start external tracking
            if article_id is not None:
                await self.reactions_tracker.save_article_message_link(
                    article_id, status_msg.message_id, message.chat.id
                )
                
                # Start tracking external source
                if content.get('source'):
                    await self.external_tracker.track_article_source(article_id, content['source'])
                
                # Ask for user categories with stats
                await self.ask_for_categories_with_stats(message, article_id)
            
        except Exception as e:
            logger.error(f"Error processing URL: {e}")
            await status_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏")
    
    async def process_text(self, message: Message, text: str):
        """Process text message"""
        if len(text) < 50:
            await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        
        status_msg = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç–∞—Ç—å—é...")
        
        try:
            # Check for duplicates
            fingerprint = self.db.generate_fingerprint(text)
            duplicate = await self.db.check_duplicate(fingerprint)
            
            if duplicate:
                await self.show_duplicate(status_msg, duplicate)
                return
            
            # Detect language and basic categorize
            language = self.categorizer.detect_language(text)
            categories = self.categorizer.categorize_article(text)
            
            # Advanced categorization with OpenAI (if available)
            advanced_categories = None
            try:
                if self.advanced_categorizer.is_available():
                    await status_msg.edit_text("ü§ñ –í—ã–ø–æ–ª–Ω—è—é —É–≥–ª—É–±–ª–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é...")
                    advanced_categories = await self.advanced_categorizer.categorize_article(
                        text, "", language
                    )
                    logger.info(f"Advanced categorization completed: {advanced_categories['primary_category']}")
            except Exception as e:
                logger.error(f"Advanced categorization failed: {e}")
            
            # Generate summary (use AI summary if available)
            summary = advanced_categories.get('summary') if advanced_categories else None
            if not summary:
                summary = self.text_extractor.generate_summary(text)
            
            # Save article
            user_id = message.from_user.id if message.from_user else None
            article_id, _ = await self.db.save_article(
                text=text,
                summary=summary,
                categories_advanced=advanced_categories,
                language=language,
                telegram_user_id=user_id
            )
            
            # Update categories
            await self.db.update_article_categories(article_id, categories)
            
            # Success message with dual categorization info
            success_text = f"‚úÖ *–°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!*\n\n"
            
            # Show dual categorization if available
            if advanced_categories:
                success_text += "\nü§ñ **AI –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è:**\n"
                
                # AI-based categorization
                ai_cat = advanced_categories.get('ai_categorization')
                if ai_cat:
                    success_text += f"üéØ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {ai_cat.get('primary_category_label', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    if ai_cat.get('subcategories'):
                        success_text += f"üìÇ *–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:* {', '.join(ai_cat['subcategories'])}\n"
                    if ai_cat.get('keywords'):
                        success_text += f"üè∑Ô∏è *–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:* {', '.join(ai_cat['keywords'][:4])}\n"
                    success_text += f"üé≤ *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {ai_cat.get('confidence', 0):.1%}\n"
                
                # Topic clustering
                topic_cat = advanced_categories.get('topic_clustering')
                if topic_cat:
                    success_text += "\nüîç **–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è:**\n"
                    success_text += f"üìä *–¢–µ–º–∞:* {topic_cat.get('topic_label', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    if topic_cat.get('topic_keywords'):
                        success_text += f"üè∑Ô∏è *–ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã:* {', '.join(topic_cat['topic_keywords'][:4])}\n"
                    success_text += f"üìà *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {topic_cat.get('confidence', 0):.1%}\n"
                
                # BART categorization  
                bart_cat = advanced_categories.get('bart_categorization')
                if bart_cat:
                    method = bart_cat.get('method', '')
                    if method == 'bart_disabled':
                        success_text += "\nü§ñ **BART –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:** ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
                        success_text += "üìã *–°—Ç–∞—Ç—É—Å:* Transformers –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n"
                    elif method == 'rule_based_classification':
                        success_text += "\nüîß **Rule-based –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:**\n"
                        success_text += f"üéØ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {bart_cat.get('primary_category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        if bart_cat.get('matched_keywords'):
                            success_text += f"üîë *–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã:* {', '.join(bart_cat['matched_keywords'][:3])}\n"
                        success_text += f"üé≤ *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {bart_cat.get('confidence', 0):.1%}\n"
                    elif method == 'bart_zero_shot':
                        success_text += "\nü§ñ **BART –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:**\n"
                        success_text += f"üéØ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {bart_cat.get('primary_category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        if bart_cat.get('categories'):
                            top_cats = [f"{cat['category']} ({cat['confidence']:.1%})" for cat in bart_cat['categories'][:2]]
                            success_text += f"üìã *–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:* {', '.join(top_cats)}\n"
                        success_text += f"üé≤ *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {bart_cat.get('confidence', 0):.1%}\n"
                    else:
                        success_text += f"\nüîß **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:**\n"
                        success_text += f"üéØ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {bart_cat.get('primary_category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        success_text += f"üé≤ *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {bart_cat.get('confidence', 0):.1%}\n"
                
                # Fallback to legacy format
                if not ai_cat and not topic_cat and not bart_cat:
                    success_text += f"üéØ *–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:* {advanced_categories.get('primary_category_label', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    if advanced_categories.get('subcategories'):
                        success_text += f"üìÇ *–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:* {', '.join(advanced_categories['subcategories'])}\n"
                    if advanced_categories.get('keywords'):
                        success_text += f"üè∑Ô∏è *–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:* {', '.join(advanced_categories['keywords'][:5])}\n"
                    success_text += f"üé≤ *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {advanced_categories.get('confidence', 0):.1%}\n"
            else:
                success_text += f"üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:* {', '.join(categories)}\n"
            
            success_text += f"üåê *–Ø–∑—ã–∫:* {language}\n"
            success_text += f"üìä *ID:* {article_id}\n"
            
            await status_msg.edit_text(success_text, parse_mode="Markdown")
            
            # Link article to message for reactions tracking
            if article_id is not None:
                await self.reactions_tracker.save_article_message_link(
                    article_id, status_msg.message_id, message.chat.id
                )
                
                # Ask for user categories with stats
                await self.ask_for_categories_with_stats(message, article_id)
            
        except Exception as e:
            logger.error(f"Error processing text: {e}")
            await status_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞")
    
    async def show_duplicate(self, message: Message, duplicate: dict):
        """Show duplicate article information"""
        duplicate_text = f"üîÑ *–î—É–±–ª–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω!*\n\n"
        
        if duplicate['title']:
            duplicate_text += f"üì∞ *–ó–∞–≥–æ–ª–æ–≤–æ–∫:* {duplicate['title']}\n"
        
        duplicate_text += f"üìÖ *–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:* {duplicate['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
        
        if duplicate['categories_auto']:
            duplicate_text += f"üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:* {', '.join(duplicate['categories_auto'])}\n"
        
        if duplicate['categories_user']:
            duplicate_text += f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:* {', '.join(duplicate['categories_user'])}\n"
        
        if duplicate['source']:
            duplicate_text += f"üåê *–ò—Å—Ç–æ—á–Ω–∏–∫:* {duplicate['source']}\n"
        
        if duplicate['author']:
            duplicate_text += f"‚úçÔ∏è *–ê–≤—Ç–æ—Ä:* {duplicate['author']}\n"
        
        duplicate_text += f"üìä *ID:* {duplicate['id']}\n"
        
        await message.edit_text(duplicate_text, parse_mode="Markdown")
    
    async def ask_for_categories(self, message: Message, article_id: int):
        """Ask user for additional categories"""
        keyboard = InlineKeyboardBuilder()
        keyboard.add(types.InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            callback_data=f"add_categories:{article_id}"
        ))
        keyboard.add(types.InlineKeyboardButton(
            text="‚úÖ –ì–æ—Ç–æ–≤–æ",
            callback_data=f"done:{article_id}"
        ))
        
        await message.answer(
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ —Å—Ç–∞—Ç—å–µ?",
            reply_markup=keyboard.as_markup()
        )
    
    async def ask_for_categories_with_stats(self, message: Message, article_id: int):
        """Ask user for categories with additional options for stats and external tracking"""
        keyboard = InlineKeyboardBuilder()
        keyboard.add(types.InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            callback_data=f"add_categories:{article_id}"
        ))
        keyboard.add(types.InlineKeyboardButton(
            text="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
            callback_data=f"stats:{article_id}"
        ))
        keyboard.add(types.InlineKeyboardButton(
            text="üîó –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫",
            callback_data=f"track_external:{article_id}"
        ))
        keyboard.add(types.InlineKeyboardButton(
            text="‚úÖ –ì–æ—Ç–æ–≤–æ",
            callback_data=f"done:{article_id}"
        ))
        
        await message.answer(
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏?",
            reply_markup=keyboard.as_markup()
        )
    
    async def callback_add_categories(self, callback: CallbackQuery, state: FSMContext):
        """Handle add categories callback"""
        data = callback.data
        if not data:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return
            
        article_id = int(data.split(":")[1])
        
        # Save article_id to state
        await state.update_data(article_id=article_id)
        await state.set_state(ArticleStates.waiting_for_categories)
        
        if callback.message and hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(
                f"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å—Ç–∞—Ç—å–∏ {article_id} —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, AI\n\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
            )
        
        await callback.answer("–ñ–¥—É –≤–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
    
    async def callback_done(self, callback: CallbackQuery):
        """Handle done callback"""
        if callback.message and hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text("‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        await callback.answer()
    
    async def process_categories(self, message: Message, state: FSMContext):
        """Process user categories input - this handler is called when user is in waiting_for_categories state"""
        user_id = message.from_user.id if message.from_user else 0
        logger.info(f"Processing categories from user {user_id}: {message.text}")
        
        if message.text and message.text.startswith('/cancel'):
            await state.clear()
            await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
            
        if not message.text:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–∫—Å—Ç–æ–º")
            return
            
        # Get article_id from state
        data = await state.get_data()
        article_id = data.get('article_id')
        
        if not article_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Å—Ç–∞—Ç—å–∏")
            await state.clear()
            return
            
        # Parse categories
        categories_text = message.text.strip()
        user_categories = [cat.strip() for cat in categories_text.split(',') if cat.strip()]
        
        if not user_categories:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            return
            
        try:
            # Get current article to update user categories
            article = await self.db.get_article_by_id(article_id)
            if not article:
                await message.answer("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                await state.clear()
                return
                
            # Update user categories in database
            if not self.db.pool:
                raise RuntimeError("Database pool not initialized")
            async with self.db.pool.acquire() as conn:
                await conn.execute(
                    "UPDATE articles SET categories_user = $2, updated_at = CURRENT_TIMESTAMP WHERE id = $1",
                    article_id, user_categories
                )
            
            await message.answer(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
                f"üè∑Ô∏è {', '.join(user_categories)}\n\n"
                f"–°—Ç–∞—Ç—å—è {article_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"
            )
            
        except Exception as e:
            logger.error(f"Error updating user categories: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            
        await state.clear()
    
    async def handle_message_reaction(self, reaction: MessageReactionUpdated):
        """Handle message reactions for tracking article engagement"""
        try:
            await self.reactions_tracker.handle_message_reaction(reaction)
        except Exception as e:
            logger.error(f"Error handling message reaction: {e}")
    
    async def handle_message_reaction_count(self, reaction_count: MessageReactionCountUpdated):
        """Handle message reaction counts for tracking article engagement"""
        try:
            await self.reactions_tracker.handle_message_reaction_count(reaction_count)
        except Exception as e:
            logger.error(f"Error handling message reaction count: {e}")
    
    async def callback_show_stats(self, callback: CallbackQuery):
        """Show article statistics including reactions and external stats"""
        try:
            data = callback.data
            if not data:
                await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return
                
            article_id = int(data.split(":")[1])
            
            # Get Telegram reactions
            telegram_stats = await self.reactions_tracker.get_article_reactions(article_id)
            
            # Get external source stats
            external_stats = await self.external_tracker.get_article_external_stats(article_id)
            
            # Format stats message
            stats_text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—å–∏ {article_id}*\n\n"
            
            # Telegram stats
            if telegram_stats['reaction_counts']:
                stats_text += "ü§ñ *Telegram —Ä–µ–∞–∫—Ü–∏–∏:*\n"
                for emoji, count in telegram_stats['reaction_counts'].items():
                    stats_text += f"  {emoji} {count}\n"
                stats_text += f"üìä –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: {telegram_stats['total_likes']}\n"
                stats_text += f"üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {telegram_stats['total_views']}\n\n"
            
            # External stats
            if external_stats:
                for source_type, stats in external_stats.items():
                    stats_text += f"üåê *{source_type.title()}:*\n"
                    stats_text += f"  üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {stats['views']}\n"
                    stats_text += f"  üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {stats['comments']}\n"
                    stats_text += f"  üëç –õ–∞–π–∫–∏: {stats['likes']}\n"
                    if stats['bookmarks'] > 0:
                        stats_text += f"  üîñ –ó–∞–∫–ª–∞–¥–∫–∏: {stats['bookmarks']}\n"
                    stats_text += f"  üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['last_updated'].strftime('%d.%m %H:%M')}\n\n"
            
            if not telegram_stats['reaction_counts'] and not external_stats:
                stats_text += "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
                stats_text += "–î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–∫—Ü–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"
            
            if callback.message and hasattr(callback.message, 'edit_text'):
                await callback.message.edit_text(stats_text, parse_mode="Markdown")
            
            await callback.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            
        except Exception as e:
            logger.error(f"Error showing stats: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def callback_track_external(self, callback: CallbackQuery):
        """Handle external source tracking setup"""
        try:
            data = callback.data
            if not data:
                await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return
                
            article_id = int(data.split(":")[1])
            
            if callback.message and hasattr(callback.message, 'edit_text'):
                await callback.message.edit_text(
                    f"üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Ç–∞—Ç—å–∏ {article_id} –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n\n"
                    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:\n"
                    "‚Ä¢ Habr.com\n"
                    "‚Ä¢ Medium.com\n"
                    "‚Ä¢ DEV.to\n\n"
                    "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
                )
            
            await callback.answer("–ñ–¥—É —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫...")
            
        except Exception as e:
            logger.error(f"Error in track external callback: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
    
    async def start_polling(self):
        """Start bot polling"""
        await self.initialize()
        logger.info("Starting bot polling...")
        try:
            # Configure allowed updates to include reactions
            allowed_updates = ['message', 'callback_query', 'message_reaction', 'message_reaction_count']
            await self.dp.start_polling(self.bot, allowed_updates=allowed_updates)
        finally:
            await self.shutdown()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    bot = ArticleBot()
    asyncio.run(bot.start_polling())