"""
Test script for advanced categorizer integration
"""
import asyncio
import logging
import os
from database import DatabaseManager
from advanced_categorizer import AdvancedCategorizer

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_advanced_categorizer():
    """Test the advanced categorizer system"""
    print("üß† Testing Advanced Article Categorizer")
    
    # Initialize components
    db = DatabaseManager()
    await db.initialize()
    
    categorizer = AdvancedCategorizer()
    
    try:
        if not categorizer.is_available():
            print("‚ö†Ô∏è  OpenAI API key not available - advanced categorizer disabled")
            print("üí° To enable: Set OPENAI_API_KEY environment variable")
            return
        
        print("‚úÖ OpenAI API key found - testing categorization...")
        
        # Test article for categorization
        test_text = """
        –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ñ–∏–Ω—Ç–µ—Ö –∏–Ω–¥—É—Å—Ç—Ä–∏—é. –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ 
        –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–∞–Ω–∫–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Å–∫–æ—Ä–∏–Ω–≥–∞ –∏ –≤—ã—è–≤–ª–µ–Ω–∏—è 
        –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞. –ù–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ 
        –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–µ–π.
        """
        
        test_title = "–ò–ò –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö: —Ä–µ–≤–æ–ª—é—Ü–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –¥–µ–ª–∞"
        
        # Perform advanced categorization
        result = await categorizer.categorize_article(test_text, test_title, "ru")
        
        print(f"üìä Categorization Result:")
        print(f"üéØ Primary Category: {result['primary_category_label']}")
        print(f"üìÇ Subcategories: {', '.join(result['subcategories'])}")
        print(f"üè∑Ô∏è  Keywords: {', '.join(result['keywords'])}")
        print(f"üé≤ Confidence: {result['confidence']:.1%}")
        print(f"üìù Summary: {result['summary'][:200]}...")
        
        # Test saving to database with advanced categories
        article_id, fingerprint = await db.save_article(
            text=test_text,
            title=test_title,
            summary=result['summary'],
            categories_advanced=result,
            language="ru",
            telegram_user_id=999999
        )
        
        if article_id:
            print(f"‚úÖ Article saved to database with ID: {article_id}")
            
            # Retrieve and verify
            saved_article = await db.get_article_by_id(article_id)
            if saved_article and saved_article.get('categories_advanced'):
                print("‚úÖ Advanced categories saved and retrieved successfully")
                print(f"üíæ Saved categories: {saved_article['categories_advanced']['primary_category']}")
            else:
                print("‚ö†Ô∏è  Advanced categories not saved properly")
        else:
            print("‚ùå Failed to save article (duplicate?)")
        
        print("üéâ Advanced categorizer test completed!")
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        logger.error(f"Test error: {e}")
    
    finally:
        await db.close()

async def test_basic_vs_advanced():
    """Compare basic vs advanced categorization"""
    print("\nüî¨ Comparing Basic vs Advanced Categorization")
    
    # Initialize
    db = DatabaseManager()
    await db.initialize()
    
    from article_categorizer import ArticleCategorizer
    basic_categorizer = ArticleCategorizer()
    advanced_categorizer = AdvancedCategorizer()
    
    test_text = """
    –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —Ç—Ä–µ–±—É–µ—Ç 
    –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Docker –∏ Kubernetes 
    –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–µ—Å–ø–µ—á–∏—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. 
    –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å –≤ DevOps –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö.
    """
    
    try:
        # Basic categorization
        basic_categories = basic_categorizer.categorize_article(test_text)
        print(f"üîß Basic Categories: {', '.join(basic_categories)}")
        
        # Advanced categorization (if available)
        if advanced_categorizer.is_available():
            advanced_result = await advanced_categorizer.categorize_article(test_text)
            print(f"üß† Advanced Category: {advanced_result['primary_category_label']}")
            print(f"üìÇ Subcategories: {', '.join(advanced_result['subcategories'])}")
            print(f"üè∑Ô∏è  Keywords: {', '.join(advanced_result['keywords'][:5])}")
            print(f"üé≤ Confidence: {advanced_result['confidence']:.1%}")
        else:
            print("‚ö†Ô∏è  Advanced categorizer not available")
    
    except Exception as e:
        print(f"‚ùå Comparison failed: {e}")
    
    finally:
        await db.close()

async def main():
    """Run all tests"""
    print("üöÄ Starting Advanced Categorizer Integration Tests")
    
    await test_advanced_categorizer()
    await test_basic_vs_advanced()
    
    print("\n‚ú® All tests completed!")

if __name__ == "__main__":
    asyncio.run(main())