"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
"""
import asyncio
import logging
from database import DatabaseManager
from telegram_bot import ArticleBot

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def demo_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏
    test_article = """
    –†–µ–≤–æ–ª—é—Ü–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –Ω–∞–±–∏—Ä–∞–µ—Ç –æ–±–æ—Ä–æ—Ç—ã. 
    –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ LLM –º–æ–¥–µ–ª–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ GPT-4 –∏ Claude, –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å 
    –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è.
    
    –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å 
    –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–¥ –∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏. –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ 
    –∏ —Å–æ–∑–¥–∞—é—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.
    
    –≠—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ 
    –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.
    """
    
    print("üìÑ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è:")
    print(test_article[:200] + "...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    db = DatabaseManager()
    await db.initialize()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    bot = ArticleBot()
    
    try:
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        print("\nüîß –ë–∞–∑–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è:")
        basic_categories = bot.categorizer.categorize_article(test_article)
        print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(basic_categories)}")
        
        # –¢–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        print("\nüß† –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è:")
        if bot.advanced_categorizer.is_available():
            try:
                advanced_result = await bot.advanced_categorizer.categorize_article(
                    test_article, "–ò–ò –≤ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏", "ru"
                )
                print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {advanced_result['primary_category_label']}")
                print(f"üìÇ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(advanced_result['subcategories'])}")
                print(f"üè∑Ô∏è  –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(advanced_result['keywords'][:5])}")
                print(f"üé≤ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {advanced_result['confidence']:.1%}")
            except Exception as e:
                print(f"‚ö†Ô∏è  AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {str(e)[:100]}...")
                print("üí° (–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π OpenAI API –∫–ª—é—á)")
        else:
            print("‚ö†Ô∏è  AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ—Ç API –∫–ª—é—á–∞)")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüíæ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—Ç–∞—Ç—å–∏ —Å –¥–≤–æ–π–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
        print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—è:")
        print(f"   ‚Ä¢ categories_auto (–±–∞–∑–æ–≤–∞—è)")
        print(f"   ‚Ä¢ categories_advanced (JSON —Å AI –¥–∞–Ω–Ω—ã–º–∏)")
        print(f"   ‚Ä¢ primary_category, subcategories, keywords, confidence")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
        print(f"\nü§ñ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞:")
        print(f"   ‚Ä¢ Telegram –±–æ—Ç: {'‚úÖ –ó–∞–ø—É—â–µ–Ω' if True else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"   ‚Ä¢ API —Å–µ—Ä–≤–µ—Ä: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 5000")
        print(f"   ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        print(f"   ‚Ä¢ AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if bot.advanced_categorizer.is_available() else '‚ö†Ô∏è  –ù—É–∂–µ–Ω OpenAI –∫–ª—é—á'}")
        
    except Exception as e:
        logger.error(f"Demo error: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    
    finally:
        await db.close()
    
    print(f"\nüéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")

if __name__ == "__main__":
    asyncio.run(demo_integration())